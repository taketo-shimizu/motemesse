generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  name              String?
  age               Int?
  job               String?
  hobby             String?
  residence         String?
  workplace         String?        @map("work_place")
  bloodType         String?        @map("blood_type")
  education         String?
  workType          String?        @map("work_type")
  holiday           String?
  marriageHistory   String?        @map("marriage_history")
  hasChildren       String?        @map("has_children")
  smoking           String?
  drinking          String?
  livingWith        String?        @map("living_with")
  marriageIntention String?        @map("marriage_intention")
  selfIntroduction  String?        @map("self_introduction")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  tone              Int            @default(0)
  recentTargetId    Int?           @map("recent_target_id")
  anonymousId       String?        @unique(map: "users_anonymousId_key") @map("anonymous_id")
  conversations     Conversation[]
  targets           Target[]
  recentTarget      Target?        @relation("UserRecentTarget", fields: [recentTargetId], references: [id])

  @@map("users")
}

model Target {
  id                    Int            @id @default(autoincrement())
  name                  String
  userId                Int            @map("user_id")
  age                   Int?
  job                   String?
  hobby                 String?
  residence             String?
  workplace             String?        @map("work_place")
  bloodType             String?        @map("blood_type")
  education             String?
  workType              String?        @map("work_type")
  holiday               String?
  marriageHistory       String?        @map("marriage_history")
  hasChildren           String?        @map("has_children")
  smoking               String?
  drinking              String?
  livingWith            String?        @map("living_with")
  marriageIntention     String?        @map("marriage_intention")
  selfIntroduction      String?        @map("self_introduction")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")
  conversations         Conversation[]
  user                  User           @relation(fields: [userId], references: [id])
  usersWithRecentTarget User[]         @relation("UserRecentTarget")

  @@map("targets")
}

model Conversation {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  targetId      Int      @map("target_id")
  femaleMessage String   @map("female_message")
  maleReply     String   @map("male_reply")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  target        Target   @relation(fields: [targetId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}
